/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ardi nusawan
 */
public class GUIServer extends javax.swing.JFrame {
    ArrayList clientOutputStreams;
    ArrayList<String> onlineUsers; //Dibikin array 2 dimensi
    // Username PosX PosY Score
    // player1  1    3    20
    // player2  2    4    50
    // .        .    .    .
    
    // kalau ga bisa biarin aja satu dimensi string tapi isi arraynya gabungan semua data
    //ex: "username:1:2:100"
    // nanti dipisahin ketika mau ngambil datanya
    
    public class ClientHandler implements Runnable{
    BufferedReader reader;
    Socket sock;
        PrintWriter client;

    
    public ClientHandler(Socket clientSocket, PrintWriter user){
        client = user;
        try {
            sock = clientSocket;
            InputStreamReader isReader = new InputStreamReader(sock.getInputStream());
            reader = new BufferedReader(isReader);
        } catch (IOException ex) {
            //Logger.getLogger(GUIServer.class.getName()).log(Level.SEVERE, null, ex);
            outputPane.append("Error beginning StreamReader. \n");
        }
        
    }
    
    @Override
    public void run(){
        String message, connect = "Connect", disconnect  = "Disconnect", chat = "Chat";
       String[] data;
       
        try {
            while((message = reader.readLine())!=null){
                outputPane.append("Received: " + message + "\n" );
                data = message.split(":");
                    for (String token:data){
                        outputPane.append(token + "\n");
                        
                    }
                    if (data[2].equals(connect)){
                        tellEveryone((data[0] + ":" + data[1] + ":" + chat));
                        // tellEveryone
                        
                        userAdd(data[0]); // <-ini kan cuma ngeset username doang.
                        // 
                        // userAdd(data[0],x,y,0);    <- x,y posisi awal user baru dan score mula2 0
                    }
                    else if (data[2].equals(disconnect)){
                        tellEveryone((data[0] + ":has disconnected." + ":" + chat));
                        userRemove(data[0]);
                    }
                    else if(data[2].equals(chat)){
                        tellEveryone(message);
                    }
                    else {
                        outputPane.append("No Condition were met. \n");
                    }
            }} catch (IOException ex) {
            //Logger.getLogger(GUIServer.class.getName()).log(Level.SEVERE, null, ex);
            outputPane.append(":lost a connection. \n");
            ex.printStackTrace();
            clientOutputStreams.remove(client);
        }
    }
}
    
    
    /**
     * Creates new form GUIServer
     */
    public GUIServer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputPane = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        outputPane.setEditable(false);
        outputPane.setColumns(20);
        outputPane.setRows(5);
        jScrollPane1.setViewportView(outputPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(startButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(stopButton)
                .addGap(72, 72, 72))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        Thread starter = new Thread(new ServerStart());
        starter.start();
        
        outputPane.append("Server started \n");
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // TODO add your handling code here:
        tellEveryone("Server:is stopping and all users will be disconnected.\n:Chat");
        outputPane.append("Server Stopping");
    }//GEN-LAST:event_stopButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIServer().setVisible(true);
            }
        });
    }
    
    public class ServerStart implements Runnable{
        public void run(){
            clientOutputStreams = new ArrayList();
            onlineUsers = new ArrayList();
            try {
                ServerSocket serverSock = new ServerSocket(5000);
                while(true){
                    Socket clientSock = serverSock.accept();
                    PrintWriter writer = new PrintWriter(clientSock.getOutputStream());
                    clientOutputStreams.add(writer);
                    
                    Thread listener = new Thread(new ClientHandler(clientSock,writer));
                    listener.start();
                    outputPane.append("Got a connection. \n");
            }
            } catch (IOException ex) {
                //Logger.getLogger(GUIServer.class.getName()).log(Level.SEVERE, null, ex);
                outputPane.append("Error making a connection. \n");
            }
            
        }
    }
    
    public void userAdd (String data){ // userAdd(String data, int x, int y, int score){
        String message, add = ": :Connect", done = "Server: :Done", name = data; // add=":Connect:"
        // name=data + ":" + x + ":" + y + ":" + score;
        outputPane.append("Before " + name + " added. \n");
        onlineUsers.add(name); // isi name adalah semua data username posisi dan score
        outputPane.append("After " + name + " added. \n");
        String[] tempList = new String[(onlineUsers.size())];
        onlineUsers.toArray(tempList);
            
            for(String token:tempList){
                // isi token kan jadinya gabungan data
                // dipisain dulu dengan ":"
                // data = token.split(":")  -->  "data[0]:data[1]:data[2]:data[3]" = "username:x:y:score"
                message = (token + add); //message = (data[0] + ":" + score + add + x + ":" + y)
                // ex pesan mengirim:  "faiz: :Connect:1:1:0"
                 tellEveryone(message);
            }
            tellEveryone(done);
    }
    
    public void userRemove (String data){
        String message, add =": :Connect",done ="Server: :Done", name = data;
        onlineUsers.remove(name);
        String[] tempList = new String[(onlineUsers.size())];
        onlineUsers.toArray(tempList);
        
            for(String token:tempList){
                message = (token + add);
                tellEveryone(message);
            }
            tellEveryone(done);
    }
    
    public void tellEveryone(String message){
        Iterator it = clientOutputStreams.iterator();
        
        while(it.hasNext()){
            PrintWriter writer = (PrintWriter) it.next();
            writer.println(message);
            outputPane.append("Sending " + message + "\n");
                writer.flush();
                outputPane.setCaretPosition(outputPane.getDocument().getLength());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputPane;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
